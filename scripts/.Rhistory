average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
group_by(SUBID, older_younger, sex, vadersenti_score) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(amygdalal), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
names(average_activation)[6] = "average" #renaming the output of previous function
names(average_activation)[5] = "average" #renaming the output of previous function
average_activation$vadersenti_score <- as.numeric(average_activation$vadersenti_score)
test<-lmer(average~vadersenti_score + (1|SUBID), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test)
## let's test just other-selected w/ vocals
average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
group_by(SUBID, older_younger, sex, vadersenti_score,stim_name) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(amygdalal), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
names(average_activation)[5] = "average" #renaming the output of previous function
average_activation$vadersenti_score <- as.numeric(average_activation$vadersenti_score)
names(average_activation)[6] = "average" #renaming the output of previous function
## let's test just other-selected w/ vocals
average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
group_by(SUBID, older_younger, sex, vadersenti_score,stim_name) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(amygdalal), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
names(average_activation)[6] = "average" #renaming the output of previous function
average_activation$vadersenti_score <- as.numeric(average_activation$vadersenti_score)
test<-lmer(average~vadersenti_score + (1|SUBID) + (1|stim_name), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test)
average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
group_by(SUBID, older_younger, self_other, sex, vadersenti_score) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(amygdalar), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
names(average_activation)[6] = "average" #renaming the output of previous function
average_activation$vadersenti_score <- as.numeric(average_activation$vadersenti_score)
test<-lmer(average~vadersenti_score + (1|SUBID), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
group_by(SUBID, older_younger, sex, vadersenti_score,stim_name) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(amygdalal), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
group_by(SUBID, older_younger, self_other, sex, vadersenti_score, stim_name) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(amygdalar), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
names(average_activation)[7] = "average" #renaming the output of previous function
average_activation$vadersenti_score <- as.numeric(average_activation$vadersenti_score)
test<-lmer(average~vadersenti_score + (1|SUBID) + (1|stim_name), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
group_by(SUBID, older_younger, self_other, sex, vadersenti_score, stim_name) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(naccl), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
names(average_activation)[7] = "average" #renaming the output of previous function
average_activation$vadersenti_score <- as.numeric(average_activation$vadersenti_score)
test<-lmer(average~vadersenti_score + (1|SUBID) + (1|stim_name), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
group_by(SUBID, older_younger, self_other, sex, vadersenti_score, stim_name) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(naccr), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
names(average_activation)[7] = "average" #renaming the output of previous function
average_activation$vadersenti_score <- as.numeric(average_activation$vadersenti_score)
test<-lmer(average~vadersenti_score + (1|SUBID) + (1|stim_name), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
group_by(SUBID, older_younger, self_other, sex, vadersenti_score, stim_name) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(amydalar), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
group_by(SUBID, older_younger, self_other, sex, vadersenti_score, stim_name) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(amydalar), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
group_by(SUBID, older_younger, self_other, sex, vadersenti_score, stim_name) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(amygdalar), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
names(average_activation)[7] = "average" #renaming the output of previous function
average_activation$vadersenti_score <- as.numeric(average_activation$vadersenti_score)
test<-lmer(average~vadersenti_score + (1|SUBID) + (1|stim_name), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test)
test<-lmer(average~vadersenti_score + (vadersenti_score|SUBID) + (1|stim_name), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
test<-lmer(average~vadersenti_score + (vadersenti_score|SUBID) + (vadersenti_score|stim_name), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
test<-lmer(average~vadersenti_score + (vadersenti_score|SUBID) + (1|stim_name), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
group_by(SUBID, older_younger, self_other, sex, vadersenti_score, stim_name) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(Icl), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
names(average_activation)[7] = "average" #renaming the output of previous function
average_activation$vadersenti_score <- as.numeric(average_activation$vadersenti_score)
test<-lmer(average~vadersenti_score + (1|SUBID) + (1|stim_name), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
##plotting
ggplot(df=average_activation, aes(x=vadersenti_score, y=average_activation))+
geom_point()+
theme_classic()
View(average_activation)
##plotting
ggplot(data=average_activation, aes(x=vadersenti_score, y=average_activation))+
geom_point()+
theme_classic()
##plotting
ggplot(data=average_activation, aes(x=vadersenti_score, y=average_activation))+
geom_point()
##plotting
ggplot(data=average_activation, aes(x=vadersenti_score, y=average))+
geom_point()
average_activation <-
timeseries_NLP %>%
subset(vocal=="Y") %>%
subset(self_other=="self") %>%
group_by(SUBID, older_younger, sex, vadersenti_score,stim_name) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(amygdalal), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
names(average_activation)[6] = "average" #renaming the output of previous function
average_activation$vadersenti_score <- as.numeric(average_activation$vadersenti_score)
test<-lmer(average~vadersenti_score + (1|SUBID) + (1|stim_name), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test)
test<-lmer(average~vadersenti_score + (1|SUBID), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test)
##plotting
ggplot(data=average_activation, aes(x=vadersenti_score, y=average))+
geom_point()
View(timeseries_NLP)
covariates <- timeseries_NLP %>%
select(TR, SUBID, vadersenti_score)
View(covariates)
covariates <- timeseries_NLP %>%
select(TR, SUBID, vadersenti_score) %>%
subset(SUBID == "ASHA")
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>%
select(TR, vadersenti_score)
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>%
select(TR, vadersenti_score) %>%
t()
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>%
select(TR, vadersenti_score) %>%
order()
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>%
select(TR, vadersenti_score) %>%
order(TR)
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>%
select(TR, vadersenti_score) %>%
sort(TR)
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>%
select(TR, vadersenti_score) %>%
sort()
covariates <- sort(covariates)
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>%
select(TR, vadersenti_score)
covariates <- sort(covariates$TR)
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>%
select(TR, vadersenti_score) %>%
order(TR)
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>%
select(TR, vadersenti_score) %>%
order()
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>%
select(TR, vadersenti_score)
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>%
select(TR, vadersenti_score)
View(covariates)
covariate1<-covariates[order(TR)]
covariate1<-covariates[order(TR),]
covariate1<-covariates[order(covariates$TR),]
View(covariate1)
all_TRS <- seq(1:1440)
TRs <- expand.grid(
TR =  seq(1:1440)
)
View(TRs)
merge(covariates, TRs, by="TR", all = TRUE)
covariates <- merge(covariates, TRs, by="TR", all = TRUE) %>%
t()
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>% #pick a single participant each time
select(TR, vadersenti_score)
covariates<-covariates[order(covariates$TR),]
TRs <- expand.grid(
TR =  seq(1:1440)
)
View(TRs)
covariates <- merge(covariates, TRs, by="TR", all = TRUE) %>%
t()
write.csv(covariates, file="../data/sentimentscores_covariates/ASHA.csv")
covariates[is.na(covariates)] <- 0
write.csv(covariates, file="../data/sentimentscores_covariates/ASHA.csv")
covariates <- timeseries_NLP %>%
subset(SUBID == "ASHA") %>% #pick a single participant each time
select(TR, vadersenti_score)
covariates<-covariates[order(covariates$TR),]
TRs <- expand.grid(
TR =  seq(1:1440)
)
covariates <- merge(covariates, TRs, by="TR", all = TRUE)
covariates[is.na(covariates)] <- 0
write.csv(covariates, file="../data/sentimentscores_covariates/ASHA.csv")
timeseries_stimothervocal <- merge(timeseries_stimothervocal, onset_value, by.x="SUBID", by.y="SUBID")
#loading in data
```{r}
timeseries <- read.csv(file='../data/roitimeseries.csv')
timeseries$vocal= ifelse(timeseries$vocal=="y","Y", timeseries$vocal ) #recoding some values
timeseries$seconds<- (timeseries$TR - ((timeseries$order-1)*60))*0.475 # adding seconds to df
timeseries_subcortical <- read.csv(file='../scripts/limbicroitimeseries.csv')
vocal_nonvocal <- read.csv(file='../data/vocal_nonvocal.csv')
vocal_nonvocal$vocal= ifelse(vocal_nonvocal$vocal=="y","Y", timeseries$vocal ) #recoding some values
vocal_nonvocal$liking= ifelse(vocal_nonvocal$liking=="0",NA, timeseries$liking ) #recoding some values
vocal_nonvocal$familiarity= ifelse(vocal_nonvocal$familiarity=="0",NA, timeseries$familiarity ) #recoding some values
vocal_nonvocalnlp <- read.csv(file='../data/NLP.csv')
names(vocal_nonvocalnlp)[6] <- "SUBID"
vocal_nonvocalnlp <- vocal_nonvocalnlp %>%
select(SUBID, stim_name, vadersenti_score)
timeseries_NLP <- merge(timeseries_subcortical, vocal_nonvocalnlp, by=c("stim_name","SUBID"))
average_activation <-
timeseries %>%
subset(vocal=="N") %>%
group_by(SUBID, older_younger, self_other, sex) %>% ## here you can add which variables you'd be interested in looking at
summarise_at(vars(pMTGL_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
names(average_activation)[5] = "average" #renaming the output of previous function
average_activation$self_other<-as.factor(average_activation$older_younger)#if you are interested in another binary variable, just update this to the variable you're using (i.e. "average_activation$[VARIABLE NAME]" in parentheses)
#contrasts(average_activation$sex)<-c(-0.5,0.5) #if you are interested in another binary variable, just update this to the variable you're using (i.e. "average_activation$[VARIABLE NAME]" in parentheses)
test<-lmer(average~older_younger + (1|SUBID), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test)
## just messy stuff in this chunk
timeseries_stimothervocal <- subset(timeseries, Stim == 13) # you can pick any stimuli, but I chose 15 here b/c it is other-selected (i.e. everyone heard it) + it has vocals.
onset_value <-
timeseries_stimothervocal %>%
group_by(SUBID) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = aSTGl #update ROI here
)
onset_value <- cbind(onset_value[3],onset_value[28])
timeseries_stimothervocal <- merge(timeseries_stimothervocal, onset_value, by.x="SUBID", by.y="SUBID")
timeseries_stimothervocal <-
timeseries_stimothervocal %>%
group_by(SUBID) %>%
mutate(
scaled = ((aSTGl - onset_value)/sd(aSTGl)) #update ROI here as well
)
ggplot(timeseries_stimothervocal, aes(x=round(seconds), y=scaled)) + #to change the ROI you're plotting, change this y-value
geom_smooth() +
theme_classic() +
xlab("Time (s)") +
ylab("Scaled ROI Activity") +
ggtitle("pMTG Left Cluster from Univariate Analysis, Stimulus 15 (Vocal)") +
theme(plot.title = element_text(face="bold", hjust = 0.5)) +
scale_color_manual(values=c("#E69F00", "#56B4E9"))
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGR_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGR_univariatecluster - onset_value)/sd(pMTGR_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 10) #pick stims want to compare
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))))+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="vocal type", fill="vocal type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15))
ggsave('pMTGREnglishvsNonverbal.png', plot = last_plot(), scale=1, dpi=350)
o
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))))+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="vocal type", fill="vocal type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#E69F00", "#56B4E9"))
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))))+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="vocal type", fill="vocal type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))))+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="vocal type", fill="vocal type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15),
legend.position = "none") +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))))+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="vocal type", fill="vocal type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15),
legend.position = "none") +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#56B4E9","#E69F00"))
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))))+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="vocal type", fill="vocal type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15),
legend.position = "none") +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English"), alpha=0.2), fill=factor(Stim, labels = c("Nonverbal", "English"))))+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="vocal type", fill="vocal type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15),
legend.position = "none") +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))),alpha=0.2)+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="vocal type", fill="vocal type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15),
legend.position = "none") +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))),alpha=0.001)+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="vocal type", fill="vocal type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15),
legend.position = "none") +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))),alpha=0.2)+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="vocal type", fill="vocal type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))),alpha=0.2)+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="vocal type", fill="vocal type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15),
legend.title = "Stimulus Type") +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
ggsave('pMTGREnglishvsNonverbal.png', plot = last_plot(), scale=1, dpi=350)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))),alpha=0.2)+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="vocal type", fill="vocal type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15),
legend.title = "Stimulus Type") +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))),alpha=0.2)+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="Stimulus Type", fill="Stimulus Type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15),
legend.title = "Stimulus Type") +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))),alpha=0.2)+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="Stimulus Type", fill="Stimulus Type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))
View(timeseries)
### statistics: english vs. non-verbal
average_activation <-
timeseries %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 8 | stim == 10) %>%
summarise_at(vars(pMTGR_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
### statistics: english vs. non-verbal
average_activation <-
timeseries %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 8 | Stim == 10) %>%
summarise_at(vars(pMTGR_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
group_by(SUBID %>%
### statistics: english vs. non-verbal
average_activation <-
### statistics: english vs. non-verbal
average_activation <-
timeseries %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 8 | Stim == 10) %>%
group_by(SUBID) %>%
summarise_at(vars(pMTGR_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
### statistics: english vs. non-verbal
average_activation <-
### statistics: english vs. non-verbal
average_activation <-
timeseries %>%
group_by(SUBID) %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 8 | Stim == 10) %>%
summarise_at(vars(pMTGR_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
### statistics: english vs. non-verbal
average_activation <-
timeseries %>%
group_by(SUBID, Stim) %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 8 | Stim == 10) %>%
summarise_at(vars(pMTGR_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
average_activation$vocals <- ifelse(average_activation$Stim==8, "non-verbal","English")
names(average_activation)[3] = "average" #renaming the output of previous function
test<-lmer(average~Stim + (1|SUBID) + (1|stim_name), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
test<-lmer(average~Stim + (1|SUBID) + (1|Stim), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
test<-lmer(average~Stim + (1|SUBID), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
average_activation$Stim <- as.factor(average_activation$Stim)
test<-lmer(average~Stim + (1|SUBID), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
test<-lmer(average~Stim + (Stim|SUBID), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(Stim, labels = c("Nonverbal", "English")), fill=factor(Stim, labels = c("Nonverbal", "English"))),alpha=0.2)+
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="Stimulus Type", fill="Stimulus Type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#E69F00", "#56B4E9")) +
scale_fill_manual(values=c("#E69F00", "#56B4E9"))
average_activation <-
timeseries %>%
group_by(SUBID, Stim) %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 15 | Stim == 10) %>% ## pick which stimuli you'd like to pick
summarise_at(vars(pMTGR_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
average_activation$vocals <- ifelse(average_activation$Stim==8, "non-verbal","English")
average_activation$Stim <- as.factor(average_activation$Stim)
names(average_activation)[3] = "average" #renaming the output of previous function
test<-lmer(average~Stim + (1|SUBID), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
average_activation <-
timeseries %>%
group_by(SUBID, Stim) %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 8 | Stim == 7) %>% ## pick which stimuli you'd like to pick
summarise_at(vars(pMTGR_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
average_activation$vocals <- ifelse(average_activation$Stim==8, "non-verbal","English")
average_activation$Stim <- as.factor(average_activation$Stim)
names(average_activation)[3] = "average" #renaming the output of previous function
test<-lmer(average~Stim + (1|SUBID), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
average_activation <-
timeseries %>%
group_by(SUBID, Stim) %>%
#subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 8 | Stim == 7) %>% ## pick which stimuli you'd like to pick
summarise_at(vars(pMTGR_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
average_activation$vocals <- ifelse(average_activation$Stim==8, "non-verbal","English")
average_activation$Stim <- as.factor(average_activation$Stim)
names(average_activation)[3] = "average" #renaming the output of previous function
test<-lmer(average~Stim + (1|SUBID), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
