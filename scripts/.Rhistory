group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGR_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGR_univariatecluster - onset_value)/sd(pMTGR_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "English")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("English","Non-English")), fill=factor(vocals, labels = c("English", "Non-English"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#F8766D", "#619CFF", "#00BA38")) +
scale_fill_manual(values=c("#F8766D", "#619CFF", "#00BA38"))
#ggsave('pMTGREnglishvsItalian.png', plot = last_plot(), scale=1, dpi=350)
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGR_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGR_univariatecluster - onset_value)/sd(pMTGR_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "English")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("English","Non-English")), fill=factor(vocals, labels = c("English", "Non-English"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#619CFF", "#00BA38")) +
scale_fill_manual(values=c("#619CFF", "#00BA38"))
#ggsave('pMTGREnglishvsItalian.png', plot = last_plot(), scale=1, dpi=350)
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGR_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGR_univariatecluster - onset_value)/sd(pMTGR_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "English")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("English","Non-English")), fill=factor(vocals, labels = c("English", "Non-English"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#619CFF", "#00BA38")) +
scale_fill_manual(values=c("#619CFF", "#00BA38"))
ggsave('pMTGREnglishvsnonEnglish.png', plot = last_plot(), scale=1, dpi=350)
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGR_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "English")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("English","Non-English")), fill=factor(vocals, labels = c("English", "Non-English"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Left Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#619CFF", "#00BA38")) +
scale_fill_manual(values=c("#619CFF", "#00BA38"))
ggsave('pMTGLEnglishvsnonEnglish.png', plot = last_plot(), scale=1, dpi=350)
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGR_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 7 | Stim == 9 | Stim == 14 | Stim == 16) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "Nonvocal")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("English","Non-English")), fill=factor(vocals, labels = c("English", "Non-English"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Left Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#619CFF", "#00BA38")) +
scale_fill_manual(values=c("#619CFF", "#00BA38"))
#ggsave('pMTGLEnglishvsnonEnglish.png', plot = last_plot(), scale=1, dpi=350)
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGR_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGR_univariatecluster - onset_value)/sd(pMTGR_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "English")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("English Vocal","Non-English Vocal")), fill=factor(vocals, labels = c("English Vocal", "Non-English Vocal"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#619CFF", "#00BA38")) +
scale_fill_manual(values=c("#619CFF", "#00BA38")) #F8766D
#ggsave('pMTGREnglishvsnonEnglish.png', plot = last_plot(), scale=1, dpi=350)
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGR_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGR_univariatecluster - onset_value)/sd(pMTGR_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "English")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("English Vocal","Non-English Vocal")), fill=factor(vocals, labels = c("English Vocal", "Non-English Vocal"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#619CFF", "#00BA38")) +
scale_fill_manual(values=c("#619CFF", "#00BA38")) #F8766D
ggsave('pMTGREnglishvsnonEnglish.png', plot = last_plot(), scale=1, dpi=350)
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGL_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "English")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("English Vocal","Non-English Vocal")), fill=factor(vocals, labels = c("English Vocal", "Non-English Vocal"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Left Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#619CFF", "#00BA38")) +
scale_fill_manual(values=c("#619CFF", "#00BA38")) #F8766D
ggsave('pMTGLEnglishvsnonEnglish.png', plot = last_plot(), scale=1, dpi=350)
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGL_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 7 | Stim == 9 | Stim == 14 | Stim == 16) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "Nonvocal")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("Nonvocal","Non-English Vocal")), fill=factor(vocals, labels = c("Nonvocal", "Non-English Vocal"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Left Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("F8766D", "#619CFF")) +
scale_fill_manual(values=c("F8766D", "#619CFF"))
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGL_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 7 | Stim == 9 | Stim == 14 | Stim == 16) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "Nonvocal")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("Nonvocal","Non-English Vocal")), fill=factor(vocals, labels = c("Nonvocal", "Non-English Vocal"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Left Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#F8766D", "#619CFF")) +
scale_fill_manual(values=c("#F8766D", "#619CFF"))
#ggsave('pMTGLEnglishvsnonEnglish.png', plot = last_plot(), scale=1, dpi=350)
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGL_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 7 | Stim == 9 | Stim == 14 | Stim == 16) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "Nonvocal")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("Nonvocal","Non-English Vocal")), fill=factor(vocals, labels = c("Nonvocal", "Non-English Vocal"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Left Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#F8766D", "#00BA38")) +
scale_fill_manual(values=c("#F8766D", "#00BA38")) #F8766D
#ggsave('pMTGLEnglishvsnonEnglish.png', plot = last_plot(), scale=1, dpi=350)
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGL_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 7 | Stim == 9 | Stim == 14 | Stim == 16) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "Nonvocal")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("Non-English Vocal", "Nonvocal")), fill=factor(vocals, labels = c("Non-English Vocal", "Nonvocal"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Left Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#00BA38", "#F8766D")) +
scale_fill_manual(values=c("#00BA38", "#F8766D")) #F8766D
#ggsave('pMTGLEnglishvsnonEnglish.png', plot = last_plot(), scale=1, dpi=350)
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGL_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 7 | Stim == 9 | Stim == 14 | Stim == 16) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "Nonvocal")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("Non-English Vocal", "Nonvocal")), fill=factor(vocals, labels = c("Non-English Vocal", "Nonvocal"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Left Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#00BA38", "#F8766D")) +
scale_fill_manual(values=c("#00BA38", "#F8766D")) #F8766D
ggsave('pMTGLnonvocalvsnonEnglish.png', plot = last_plot(), scale=1, dpi=350)
##two stimuli one time series ##
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGR_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGR_univariatecluster - onset_value)/sd(pMTGR_univariatecluster)) #update ROIs here
)
timeseries_otherselected <-
timeseries_stimother %>%
subset(Stim == 8 | Stim == 15 | Stim == 7 | Stim == 9 | Stim == 14 | Stim == 16) #pick stims want to compare
timeseries_otherselected$vocals <- ifelse(timeseries_otherselected$Stim==15 | timeseries_otherselected$Stim==8,  "Non-English", "Nonvocal")
timeseries_otherselected$Stim <- as.factor(timeseries_otherselected$Stim)
ggplot(timeseries_otherselected, aes(x=round(seconds), y=scaled)) +
geom_smooth(aes(color=factor(vocals, labels = c("Non-English Vocal", "Nonvocal")), fill=factor(vocals, labels = c("Non-English Vocal", "Nonvocal"))), alpha=0.2) +
theme_classic()+
labs(x= "Time (s)", y="Scaled ROI Activity", color="stimulus type", fill="stimulus type")+
ggtitle("pMTG Right Cluster") +
theme(plot.title = element_text(face="bold", size = 18, hjust=0.5), axis.text=element_text(size=15), axis.title=element_text(size=15)) +
scale_color_manual(values=c("#00BA38", "#F8766D")) +
scale_fill_manual(values=c("#00BA38", "#F8766D")) #F8766D
ggsave('pMTGRnonvocalvsnonEnglish.png', plot = last_plot(), scale=1, dpi=350)
### statistics: english vs. non-verbal
average_activation <-
timeseries %>%
group_by(SUBID, Stim) %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13) %>% #pick stims want to compare %>% ## pick which stimuli you'd like to pick
summarise_at(vars(pMTGR_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
average_activation$vocals <- ifelse(average_activation$Stim==15 | average_activation$Stim==8,  "Non-English", "English")
average_activation$Stim <- as.factor(average_activation$Stim)
names(average_activation)[3] = "average" #renaming the output of previous function
test<-lmer(average~vocals + (1|SUBID) + (1|Stim), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
### statistics: english vs. non-verbal
average_activation <-
timeseries %>%
group_by(SUBID, Stim) %>%
subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 8 | Stim == 15 | Stim == 7 | Stim == 9 | Stim == 14 | Stim == 16) %>% #pick stims want to compare %>% ## pick which stimuli you'd like to pick
summarise_at(vars(pMTGR_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
average_activation$vocals <- ifelse(average_activation$Stim==15 | average_activation$Stim==8,  "Non-English", "English")
average_activation$Stim <- as.factor(average_activation$Stim)
names(average_activation)[3] = "average" #renaming the output of previous function
test<-lmer(average~vocals + (1|SUBID) + (1|Stim), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
### statistics: english vs. non-verbal
average_activation <-
timeseries %>%
group_by(SUBID, Stim) %>%
#subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 8 | Stim == 15 | Stim == 7 | Stim == 9 | Stim == 14 | Stim == 16) %>% #pick stims want to compare %>% ## pick which stimuli you'd like to pick
summarise_at(vars(pMTGR_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
average_activation$vocals <- ifelse(average_activation$Stim==15 | average_activation$Stim==8,  "Non-English", "English")
average_activation$Stim <- as.factor(average_activation$Stim)
names(average_activation)[3] = "average" #renaming the output of previous function
test<-lmer(average~vocals + (1|SUBID) + (1|Stim), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
### statistics: english vs. non-verbal
average_activation <-
timeseries %>%
group_by(SUBID, Stim) %>%
#subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 8 | Stim == 15 | Stim == 7 | Stim == 9 | Stim == 14 | Stim == 16) %>% #pick stims want to compare %>% ## pick which stimuli you'd like to pick
summarise_at(vars(pMTGL_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
average_activation$vocals <- ifelse(average_activation$Stim==15 | average_activation$Stim==8,  "Non-English", "English")
average_activation$Stim <- as.factor(average_activation$Stim)
names(average_activation)[3] = "average" #renaming the output of previous function
test<-lmer(average~vocals + (1|SUBID) + (1|Stim), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
### statistics: english vs. non-verbal
average_activation <-
timeseries %>%
group_by(SUBID, Stim) %>%
#subset(vocal=="Y") %>%
subset(self_other=="other") %>%
subset(Stim == 8 | Stim == 15 | Stim == 7 | Stim == 9 | Stim == 14 | Stim == 16) %>% #pick stims want to compare %>% ## pick which stimuli you'd like to pick
summarise_at(vars(pMTGR_univariatecluster), list(name = mean)) ##if you want to look at different ROIs, update the variable in the "vars()" argument to whichever column ROI you want
average_activation$vocals <- ifelse(average_activation$Stim==15 | average_activation$Stim==8,  "Non-English", "English")
average_activation$Stim <- as.factor(average_activation$Stim)
names(average_activation)[3] = "average" #renaming the output of previous function
test<-lmer(average~vocals + (1|SUBID) + (1|Stim), data=average_activation) #I can explain these stats the next time we meet-- a significant p-value for older_younger1 = a significant effect of age; you can update the "older_younger" variable to test which ones you're interested in
summary(test) ## all music
library(tidyverse)
library(lmerTest)
library(lme4)
library(misty)
library(ggrepel)
timeseries <- read.csv(file='../data/roitimeseries.csv')
timeseries$vocal= ifelse(timeseries$vocal=="y","Y", timeseries$vocal ) #recoding some values
timeseries$seconds<- (timeseries$TR - ((timeseries$order-1)*60))*0.475 # adding seconds to df
vocal_nonvocal <- read.csv(file='../data/vocal_nonvocal.csv')
vocal_nonvocal$vocal= ifelse(vocal_nonvocal$vocal=="y","Y", timeseries$vocal ) #recoding some values
vocal_nonvocal$liking= ifelse(vocal_nonvocal$liking=="0",NA, timeseries$liking ) #recoding some values
vocal_nonvocal$familiarity= ifelse(vocal_nonvocal$familiarity=="0",NA, timeseries$familiarity ) #recoding some values
timeseries_vocal <- subset(timeseries, timeseries$vocal=="Y")
time_seriespeak<-
timeseries %>%
subset((seconds) >=6) %>%
subset((seconds) <= 8)
test<-lmer(pMTGL_univariatecluster~older_younger + (1|SUBID), data=time_seriespeak) #random intercepts
summary(test)
