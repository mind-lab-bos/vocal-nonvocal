test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + ((language)|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + (1|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + (1|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + (language|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 9 | Stim == 7 | Stim == 14 | Stim == 17 )
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "Non-Vocal")
test<-lmer(scale(pMTGL_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (1|Stim), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (1|Stim), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim), data=timeseries_language) #random intercepts
summary(test)
test<-lmer((pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim), data=timeseries_language) #random intercepts
summary(test)
test<-lmer((pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (1|Stim), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim),control=lmerControl(optimizer = c("bobyqa"). data=timeseries_language) #random intercepts
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim),control=lmerControl(optimizer = c("bobyqa"), data=timeseries_language) #random intercepts
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim), control=lmerControl(optimizer = c("bobyqa"), data=timeseries_language) #random intercepts
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim), control=lmerControl(optimizer = c("bobyqa"), data=timeseries_language)) #random intercepts
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim),  data=timeseries_language, control=lmerControl(optimizer = c("bobyqa"))) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + (language|SUBID) + (language|Stim),  data=timeseries_language, control=lmerControl(optimizer = c("bobyqa"))) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + (language|SUBID) + (1|Stim),  data=timeseries_language, control=lmerControl(optimizer = c("bobyqa"))) #random intercepts
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + (1|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) + ((language)|SUBID) + (1|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) + ((language)|SUBID) + (language|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) + ((language)|SUBID) + (language|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + (language|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ (language)  + ((language)|SUBID) + (language|Stim), data=timeseries_language) #random  intercepts + slopes
test<-lmer(scale(pMTGR_univariatecluster) ~ (language)  + ((language)|SUBID) + (language|Stim), data=timeseries_language, control=lmerControl(optimizer = c("bobyqa"))) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGL_univariatecluster)) #update ROIs here
)
library(tidyverse)
library(lmerTest)
library(lme4)
library(misty)
library(ggrepel)
timeseries <- read.csv(file='../data/roitimeseries.csv')
unique(timeseries$SUBID)
timeseries$vocal= ifelse(timeseries$vocal=="y","Y", timeseries$vocal ) #recoding some values
timeseries$seconds<- (timeseries$TR - ((timeseries$order-1)*60))*0.475 # adding seconds to df
MIR <- read.csv(file='../data/audioExtraction.csv')
vocal_nonvocal <- read.csv(file='../data/vocal_nonvocal.csv')
vocal_nonvocal$vocal= ifelse(vocal_nonvocal$vocal=="y","Y", timeseries$vocal ) #recoding some values
vocal_nonvocal$liking= ifelse(vocal_nonvocal$liking=="0",NA, timeseries$liking ) #recoding some values
vocal_nonvocal$familiarity= ifelse(vocal_nonvocal$familiarity=="0",NA, timeseries$familiarity ) #recoding some values
timeseries_vocal <- subset(timeseries, timeseries$vocal=="Y")
time_seriespeak<-
timeseries %>%
subset((seconds) >=6) %>%
subset((seconds) <= 8)
#merge MIR features w/ MIR peaks
MIR_timeseries <- merge(time_seriespeak, MIR, by="Stim")
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGL_univariatecluster)) #update ROIs here
)
View(timeseries_other)
View(timeseries_stimother)
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(MIR_timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(MIR_timeseries, self_other=="other")
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(MIR_timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
View(onset_value)
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(MIR_timeseries, self_other=="other")
View(timeseries_stimother)
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
View(MIR_timeseries)
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475)
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475)
timeseries_other %>%
group_by(SUBID, Stim)
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(MIR_timeseries, self_other=="other")
timeseries <- read.csv(file='../data/roitimeseries.csv')
unique(timeseries$SUBID)
timeseries$vocal= ifelse(timeseries$vocal=="y","Y", timeseries$vocal ) #recoding some values
timeseries$seconds<- (timeseries$TR - ((timeseries$order-1)*60))*0.475 # adding seconds to df
MIR <- read.csv(file='../data/audioExtraction.csv')
vocal_nonvocal <- read.csv(file='../data/vocal_nonvocal.csv')
vocal_nonvocal$vocal= ifelse(vocal_nonvocal$vocal=="y","Y", timeseries$vocal ) #recoding some values
vocal_nonvocal$liking= ifelse(vocal_nonvocal$liking=="0",NA, timeseries$liking ) #recoding some values
vocal_nonvocal$familiarity= ifelse(vocal_nonvocal$familiarity=="0",NA, timeseries$familiarity ) #recoding some values
timeseries_vocal <- subset(timeseries, timeseries$vocal=="Y")
time_seriespeak<-
timeseries %>%
subset((seconds) >=6) %>%
subset((seconds) <= 8)
#merge MIR features w/ MIR peaks
MIR_timeseries <- merge(time_seriespeak, MIR, by="Stim")
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGL_univariatecluster)) #update ROIs here
)
MIR_timeseries <- merge(timeseries_stimother, MIR, by="Stim")
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + ((langauge|Stim)), data=timeseries_language) #random  intercepts + slopes
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + ((language|Stim)), data=timeseries_language) #random  intercepts + slopes
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + ((language|Stim)), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + ((1|Stim)), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language)  + ((language)|SUBID) + ((1|Stim)), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language)  + ((language)|SUBID) + ((language|Stim)), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language)  + ((language)|SUBID) + ((language|Stim)), data=timeseries_language,control=lmerControl(optimizer = c("bobyqa"))) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language)  + ((language)|SUBID) + (1|Stim)), data=timeseries_language,control=lmerControl(optimizer = c("bobyqa"))) #random  intercepts + slopes
test<-lmer(scale(pMTGL_univariatecluster) ~ (language)  + ((language)|SUBID) + ((1|Stim)), data=timeseries_language,control=lmerControl(optimizer = c("bobyqa"))) #random  intercepts + slopes
summary(test)
test<-lmer((pMTGL_univariatecluster) ~ (language)  + ((language)|SUBID) + ((1|Stim)), data=timeseries_language,control=lmerControl(optimizer = c("bobyqa"))) #random  intercepts + slopes
summary(test)
MIR_timeseries <- merge(timeseries_stimother, MIR, by="Stim")
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 9 | Stim == 7 | Stim == 14 | Stim == 17 )
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "Non-Vocal")
test<-lmer(scale(pMTGL_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer((pMTGL_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer((pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
library(tidyverse)
library(lme4)
library(lmerTest)
ID <- read.csv('../data/CONN_ID.csv')
names <- ID$CONN.id
names <- ID$X
View(ID)
ID <- read.csv('../data/CONN_ID.csv') %>%
na.rm()
ID <- read.csv('../data/CONN_ID.csv') %>%
na.omit()
ID <- read.csv('../data/CONN_ID.csv')
ID <- read.csv('../data/CONN_ID.csv') %>%
select(X != NA)
ID <- read.csv('../data/CONN_ID.csv') %>%
select(X !is.NA)
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(ColWtCL_6))
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(X))
View(ID)
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(CONN_id))
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(CONN.id))
names <- ID$X
library(tidyverse)
library(lme4)
library(lmerTest)
vocal_nonvocal<- read.csv('../data/vocal_nonvocal.csv')
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(CONN.id))
names <- ID$X
TRS <- seq(1,1440,1)
aMTGl <- read.csv(file='aMTGlTSCONN.csv', header=F)
aMTGl <- aMTGl[-(1:947),] %>%
cbind(TRS)
aMTGr <- read.csv(file='aMTGrTSCONN.csv', header=F)
aMTGr <- aMTGr[-(1:947),] %>%
cbind(TRS)
pMTGr <- read.csv(file='pMTGrTSCONN.csv', header=F)
pMTGr <- pMTGr[-(1:947),] %>%
cbind(TRS)
pMTGl <- read.csv(file='pMTGlTSCONN.csv', header=F)
pMTGl <- pMTGl[-(1:947),] %>%
cbind(TRS)
aSTGl <- read.csv(file='aSTGlTSCONN.csv', header=F)
aSTGl <- aSTGl[-(1:947),] %>%
cbind(TRS)
aSTGr <- read.csv(file='aSTGlTSCONN.csv', header=F)
aSTGr <- aSTGr[-(1:947),] %>%
cbind(TRS)
HGl <- read.csv(file='HGlTSCONN.csv', header=F)
HGl <- HGl[-(1:947),] %>%
cbind(TRS)
#next: label each column as participant, then pivot to have participants + ROI values (NOT TRS) into wide, then merge with vocal_nonvocal
View(aMTGl)
View(aSTGl)
CONN_ID <- read.csv('../data/CONN_ID.csv')
names<-row.names(CONN_ID$CONN.id)
View(CONN_ID)
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(CONN.id))
names <- ID$X
aMTGl <- aMTGl[-(1:947),] %>%
names(names)%>%
cbind(TRS) %>%
aMTGr <- read.csv(file='aMTGrTSCONN.csv', header=F)
aMTGl <- aMTGl[-(1:947),] %>%
names(names)%>%
cbind(TRS)
aMTGl <- aMTGl[-(1:947),] %>%
rownames() = names %>%
cbind(TRS)
aMTGl <- read.csv(file='aMTGlTSCONN.csv', header=F)
aMTGl <- aMTGl[-(1:947),]
rownames(aMTGl) = names
columnnames(aMTGl) = names
colnames(aMTGl) = names
View(aMTGl)
aMTGl <- read.csv(file='aMTGlTSCONN.csv', header=F)
aMTGl <- aMTGl[-(1:947),] %>%
colnames()=names %>%
cbind(TRS)
aMTGl <- read.csv(file='aMTGlTSCONN.csv', header=F)
aMTGl <- aMTGl[-(1:947),]
aMTGl <- read.csv(file='aMTGlTSCONN.csv', header=F)
aMTGl <- aMTGl[-(1:947),]
colnames(aMTGl) = names
aMTGl <- cbind(aMTGl, TRS)
View(aMTGl)
vocal_nonvocal<- read.csv('../data/vocal_nonvocal.csv')
CONN_ID <- read.csv('../data/CONN_ID.csv')
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(CONN.id))
names <- ID$X
TRS <- seq(1,1440,1)
aMTGl <- read.csv(file='aMTGlTSCONN.csv', header=F)
aMTGl <- aMTGl[-(1:947),]
colnames(aMTGl) = names
aMTGl <- cbind(aMTGl, TRS)
aMTGr <- read.csv(file='aMTGrTSCONN.csv', header=F)
aMTGr <- aMTGr[-(1:947),]
colnames(aMTGr) = names
aMTGr <- cbind(aMTGr, TRS)
pMTGr <- read.csv(file='pMTGrTSCONN.csv', header=F)
pMTGr <- pMTGr[-(1:947),]
colnames(pMTGr) = names
pMTGr <- cbind(pMTGr, TRS)
pMTGl <- read.csv(file='pMTGlTSCONN.csv', header=F)
pMTGl <- pMTGl[-(1:947),]
colnames(pMTGr) = names
pMTGr <- cbind(pMTGr, TRS)
aSTGl <- read.csv(file='aSTGlTSCONN.csv', header=F)
aSTGl <- aSTGl[-(1:947),]
colnames(aSTGl) = names
aSTGl <- cbind(aSTGl, TRS)
aSTGr <- read.csv(file='aSTGlTSCONN.csv', header=F)
aSTGr <- aSTGr[-(1:947),]
colnames(aSTGl) = names
aSTGl <- cbind(aSTGl, TRS)
HGl <- read.csv(file='HGlTSCONN.csv', header=F)
HGl <- HGl[-(1:947),]
colnames(aSTGl) = names
aSTGl <- cbind(aSTGl, TRS)
#next: pivot to have participants + ROI values (NOT TRS) into wide, then merge with vocal_nonvocal
vocal_nonvocal<- read.csv('../data/vocal_nonvocal.csv')
CONN_ID <- read.csv('../data/CONN_ID.csv')
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(CONN.id))
names <- ID$X
TRS <- seq(1,1440,1)
aMTGl <- read.csv(file='aMTGlTSCONN.csv', header=F)
aMTGl <- aMTGl[-(1:947),]
colnames(aMTGl) = names
aMTGl <- cbind(aMTGl, TRS)
View(aMTGl)
View(aMTGl)
aMTGl <- cbind(aMTGl, TRS) %>%
pivot_wider(`190716FKEE1`:`200211DCAT1`)
aMTGl <- cbind(aMTGl, TRS) %>%
pivot_longer(`190716FKEE1`:`200211DCAT1`)
aMTGl$ROI <- "aMTGl"
aMTGl <- cbind(aMTGl, TRS) %>%
pivot_longer(`190716FKEE1`:`200211DCAT1`, values_to = "aMTGl")
aMTGl <- read.csv(file='aMTGlTSCONN.csv', header=F)
aMTGl <- aMTGl[-(1:947),]
colnames(aMTGl) = names
aMTGl <- cbind(aMTGl, TRS) %>%
pivot_longer(`190716FKEE1`:`200211DCAT1`, values_to = "aMTGl")
vocal_nonvocal<- read.csv('../data/vocal_nonvocal.csv')
CONN_ID <- read.csv('../data/CONN_ID.csv')
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(CONN.id))
names <- ID$X
TRS <- seq(1,1440,1)
aMTGl <- read.csv(file='aMTGlTSCONN.csv', header=F)
aMTGl <- aMTGl[-(1:947),]
colnames(aMTGl) = names
aMTGl <- cbind(aMTGl, TRS) %>%
pivot_longer(`190716FKEE1`:`200211DCAT1`, values_to = "aMTGl")
aMTGr <- read.csv(file='aMTGrTSCONN.csv', header=F)
aMTGr <- aMTGr[-(1:947),]
colnames(aMTGr) = names
aMTGr <- cbind(aMTGr, TRS) %>%
pivot_longer(`190716FKEE1`:`200211DCAT1`, values_to = "aMTGr")
pMTGr <- read.csv(file='pMTGrTSCONN.csv', header=F)
pMTGr <- pMTGr[-(1:947),]
colnames(pMTGr) = names
pMTGr <- cbind(pMTGr, TRS) %>%
pivot_longer(`190716FKEE1`:`200211DCAT1`, values_to = "pMTGr")
pMTGl <- read.csv(file='pMTGlTSCONN.csv', header=F)
pMTGl <- pMTGl[-(1:947),]
colnames(pMTGl) = names
pMTGl <- cbind(pMTGl, TRS) %>%
pivot_longer(`190716FKEE1`:`200211DCAT1`, values_to = "pMTGl")
aSTGl <- read.csv(file='aSTGlTSCONN.csv', header=F)
aSTGl <- aSTGl[-(1:947),]
colnames(aSTGl) = names
aSTGl <- cbind(aSTGl, TRS) %>%
pivot_longer(`190716FKEE1`:`200211DCAT1`, values_to = "aSTGl")
aSTGr <- read.csv(file='aSTGlTSCONN.csv', header=F)
aSTGr <- aSTGr[-(1:947),]
colnames(aSTGr) = names
aSTGr <- cbind(aSTGr, TRS) %>%
pivot_longer(`190716FKEE1`:`200211DCAT1`, values_to = "aSTGr")
HGl <- read.csv(file='HGlTSCONN.csv', header=F)
HGl <- HGl[-(1:947),]
colnames(HGl) = names
HGl <- cbind(HGl, TRS) %>%
pivot_longer(`190716FKEE1`:`200211DCAT1`, values_to = "HGl")
#next: pivot to have participants + ROI values (NOT TRS) into wide, then merge with vocal_nonvocal
View(aSTGr)
#put all data frames into list
df_list <- list(aMTGl, aMTGr, aSTGl, aSTGr, pMTGl, pMTGr, HGl)
#merge all data frames in list
df_list %>% reduce(full_join, by='variable_name')#next: then merge with vocal_nonvocal
#merge all data frames in list
df_list %>% reduce(full_join, by=c('name','TRS')
#merge all data frames in list
df_list %>% reduce(full_join, by=c('name','TRS'))
#merge all data frames in list
master <- df_list %>% reduce(full_join, by=c('name','TRS'))
View(master)
ID = Sys.glob('../data/MRI_mus-bid_task/**********1_mus-bid-biddata.txt')
post_df = ID %>%
map_dfr(read_table, .id = "source")
post_df$source <- as.integer(post_df$source)
source <- seq(1,71,by=1)
ID <- cbind(source,ID)
post_df <- merge(post_df, ID, by.y ="source", by.x="source")
post_df$ID <-  gsub("1_mus-bid-biddata.txt", "", post_df$ID)
post_df$ID <-  gsub("../data/MRI_mus-bid_task/", "", post_df$ID)
names(post_df)<- c("Source", "Stim", "Liking", "Familiarity", "SUBID")
post_df<- subset(post_df, select=c("Stim", "SUBID"))
#to do: merge w/ vocal-nonvocal & expand df to have all TRs
post_df$SUBID<-gsub('[[:digit:]]+', '',post_df$SUBID)
onsets_stim <- merge(post_df, vocal_nonvocal, by.x=c("SUBID", "Stim"), by.y=c("participant_ID", "stim_ID"))
stim_order <- seq(1,24,1)
stim_order <- as.data.frame(rep(stim_order, 60))
TRs<- as.data.frame(seq(1,1440,1))
names(stim_order) <- "order"
names(TRs) <- "TR"
stim_order$order <- arrange(stim_order, order)
TRs <- cbind(stim_order$order, TRs)
TRs_vocalnonvocal<-merge(TRs, onsets_stim, by.x="order",by.y="stim_order")
roi_ID <- seq(1,71,1)
roi_ID <- as.data.frame(rep(roi_ID, 1440))
names(roi_ID) <- "ID"
roi_ID <- arrange(roi_ID, ID)
roi_data<-cbind(roi_ID, roidata)
View(TRs_vocalnonvocal)
TRs<- (seq(1,1440,1))
TRs_roi<- as.data.frame(rep(TRs, 71))
names(TRs_roi) <- "TR"
roi_data<-cbind(TRs_roi, roi_data)
View(TRs_roi)
#merge
roistim_order <- subset(roistim_order, roi_order <= 18 | roi_order >= 36)
roistim_order <- read.csv('../data/roi_participantorder.csv')
roi_ID <- seq(1,71,1)
roi_ID <- as.data.frame(rep(roi_ID, 1440))
names(roi_ID) <- "ID"
roi_ID <- arrange(roi_ID, ID)
TRs<- (seq(1,1440,1))
TRs_roi<- as.data.frame(rep(TRs, 71))
names(TRs_roi) <- "TR"
#merge
roistim_order <- subset(roistim_order, roi_order <= 18 | roi_order >= 36)
roi_dataID<- merge(roi_data, roistim_order, by.x = "ID", by.y="roi_order")
roi_data<-cbind(TRs_roi, roi_ID)
#merge
roistim_order <- subset(roistim_order, roi_order <= 18 | roi_order >= 36)
roi_dataID<- merge(roi_data, roistim_order, by.x = "ID", by.y="roi_order")
attempt <- merge(TRs_vocalnonvocal, roi_dataID, by.x=c("TR", "SUBID"), by.y=c("TR","SUBID"))
#isolate just music-listening TR
x=1:77760
for (i in x){
if (attempt$TR[i] >= (60*(attempt$order[i]-1)+43) & attempt$TR[i] <= (60*(attempt$order[i]-1)+60)){
attempt$TR[i] = NA
}
}
attempt<-attempt[!is.na(attempt$TR),]
attempt<-subset(attempt, Stim < 17)
merge(attempt, master, by.x = "TRs", by.y="TRS")
View(attempt)
merge(attempt, master, by.x = "TR", by.y="TRS")
View(df_list)
View(CONN_ID)
View(master)
master$SUBID<-gsub('[[:digit:]]+', '',master$name)
merge(attempt, master, by.x = c("TR", "SUBID"), by.y=c("TRS", "SUBID"))
master_final <- merge(attempt, master, by.x = c("TR", "SUBID"), by.y=c("TRS", "SUBID"))
View(master_final)
MIR <- read.csv(file='../data/audioExtraction.csv')
View(MIR)
master_final <- merge(attempt, master, by.x = c("TR", "SUBID"), by.y=c("TRS", "SUBID")) %>%
merge(MIR, by="Stim")
master_final$cor <- mean(cor(master_final[, c('aMTGl','aMTGr')]))
master_final$cor <- mean(cor(master_final[21:27]))
x=1:nrow(master_final)
for (i in x){
master_final$cor[i] = mean(cor(master_final[i,21:27]))
}
master_final$cor[2] = mean(cor(master_final[2,21:27]))
