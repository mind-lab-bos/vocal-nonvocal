subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries <- read.csv(file='../data/roitimeseries.csv')
unique(timeseries$SUBID)
timeseries$vocal= ifelse(timeseries$vocal=="y","Y", timeseries$vocal ) #recoding some values
timeseries$seconds<- (timeseries$TR - ((timeseries$order-1)*60))*0.475 # adding seconds to df
MIR <- read.csv(file='../data/audioExtraction.csv')
vocal_nonvocal <- read.csv(file='../data/vocal_nonvocal.csv')
vocal_nonvocal$vocal= ifelse(vocal_nonvocal$vocal=="y","Y", timeseries$vocal ) #recoding some values
vocal_nonvocal$liking= ifelse(vocal_nonvocal$liking=="0",NA, timeseries$liking ) #recoding some values
vocal_nonvocal$familiarity= ifelse(vocal_nonvocal$familiarity=="0",NA, timeseries$familiarity ) #recoding some values
#merge MIR features w/ MIR peaks
merge(time_seriespeak, MIR, by="Stim")
timeseries <- read.csv(file='../data/roitimeseries.csv')
unique(timeseries$SUBID)
timeseries$vocal= ifelse(timeseries$vocal=="y","Y", timeseries$vocal ) #recoding some values
timeseries$seconds<- (timeseries$TR - ((timeseries$order-1)*60))*0.475 # adding seconds to df
MIR <- read.csv(file='../data/audioExtraction.csv')
vocal_nonvocal <- read.csv(file='../data/vocal_nonvocal.csv')
vocal_nonvocal$vocal= ifelse(vocal_nonvocal$vocal=="y","Y", timeseries$vocal ) #recoding some values
vocal_nonvocal$liking= ifelse(vocal_nonvocal$liking=="0",NA, timeseries$liking ) #recoding some values
vocal_nonvocal$familiarity= ifelse(vocal_nonvocal$familiarity=="0",NA, timeseries$familiarity ) #recoding some values
timeseries_vocal <- subset(timeseries, timeseries$vocal=="Y")
time_seriespeak<-
timeseries %>%
subset((seconds) >=6) %>%
subset((seconds) <= 8)
#merge MIR features w/ MIR peaks
merge(time_seriespeak, MIR, by="Stim")
#merge MIR features w/ MIR peaks
MIR_timeseries <- merge(time_seriespeak, MIR, by="Stim")
View(MIR_timeseries)
timeseries_language <-
time_seriespeak%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
View(timeseries_language)
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + (1|SUBID), data=timeseries_language) #random  intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random  intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster ~ language + (1|SUBID), data=timeseries_language) #random  intercepts
summary(test)
test<-lmer(pMTGR_univariatecluster ~ language +  RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 9 | Stim == 7 | Stim == 14 | Stim == 17 )
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "Non-Vocal")
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(pMTGL_univariatecluster ~ language +  RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 9 | Stim == 7 | Stim == 14 | Stim == 17 )
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "Non-Vocal")
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language)
summary(test)
test<-lmer(pMTGL_univariatecluster ~ language + (1|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(pMTGL_univariatecluster ~ language +  RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(pMTGR_univariatecluster ~ language +  RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 9 | Stim == 7 | Stim == 14 | Stim == 17 )
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "Non-Vocal")
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster ~ language + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster ~ language + (1|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster ~ vocal +  RMS_energy + event_density + (language|SUBID), data=MIR_timeseries) #random  intercepts + slopes
test<-lmer(pMTGL_univariatecluster ~ vocal.x +  RMS_energy + event_density + (language|SUBID), data=MIR_timeseries) #random  intercepts + slopes
test<-lmer(pMTGL_univariatecluster ~ vocal.x +  RMS_energy + event_density + (vocal.x|SUBID), data=MIR_timeseries) #random  intercepts + slopes
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 9 | Stim == 7 | Stim == 14 | Stim == 17 )
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "Non-Vocal")
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGR_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGR_univariatecluster ~ language + RMS_energy + event_density + (1|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGR_univariatecluster ~ language +  (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13  | Stim == 9 | Stim == 7 | Stim == 14 | Stim == 17 )
timeseries_language$language <- ifelse(timeseries_language$Stim == 10 | timeseries_language$Stim == 11, timeseries_language$Stim == 12 | timeseries_language$Stim == 13, "English", "Non-Vocal")
timeseries_language$language <- ifelse(timeseries_language$Stim == 10 | timeseries_language$Stim == 11 | timeseries_language$Stim == 12 | timeseries_language$Stim == 13, "English", "Non-Vocal")
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(pMTGL_univariatecluster ~ language +  RMS_energy + event_density + (language|SUBID), data=MIR_timeseries) #random  intercepts + slopes
View(timeseries_language)
test<-lmer(pMTGL_univariatecluster ~ language +  RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(pMTGR_univariatecluster ~ language +  RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 9 | Stim == 7 | Stim == 14 | Stim == 17 )
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "Non-Vocal")
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGR_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGR_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + familiarity+ (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + liking+ (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGR_univariatecluster ~ language + RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster~older_younger + (1|SUBID), data=time_seriespeak) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster~older_younger + (older_younger|SUBID), data=time_seriespeak) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster~older_younger + RMS_energy + event_density + (1|SUBID), data=MIR_timeseries) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster~older_younger + RMS_energy + event_density + (event_density|SUBID), data=MIR_timeseries) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster~older_younger + RMS_energy + event_density + (event_density + RMS_energy|SUBID), data=MIR_timeseries) #random intercepts
summary(test)
test<-lmer(pMTGL_univariatecluster~older_younger + RMS_energy + event_density + (older_younger + event_density + RMS_energy|SUBID), data=MIR_timeseries) #random intercepts
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(pMTGL_univariatecluster ~ language +  RMS_energy + event_density + (language +  RMS_energy + event_density|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(pMTGL_univariatecluster ~ language +  RMS_energy + event_density + (language|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(pMTGR_univariatecluster ~ language +  RMS_energy + event_density + (language +  RMS_energy + event_density|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 9 | Stim == 7 | Stim == 14 | Stim == 17 )
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "Non-Vocal")
test<-lmer(pMTGL_univariatecluster ~ language + RMS_energy + event_density + (language + RMS_energy + event_density|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(pMTGR_univariatecluster ~ language + RMS_energy + event_density + (language + RMS_energy + event_density|SUBID), data=timeseries_language) #random intercepts
summary(test)
typeof(MIR_timeseries$event_density)
test<-lmer(pMTGL_univariatecluster ~ scale(language) +  scale(RMS_energy) + scale(event_density) + (scale(language) +  scale(RMS_energy) + scale(event_density)|SUBID), data=timeseries_language) #random  intercepts + slopes
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + (scale(language) +  scale(RMS_energy) + scale(event_density)|SUBID), data=timeseries_language) #random  intercepts + slopes
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language) +  scale(RMS_energy) + scale(event_density)|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language) +  scale(RMS_energy) + scale(event_density)|SUBID),control=lmerControl(optimizer = c("bobyqa")), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID),control=lmerControl(optimizer = c("bobyqa")), data=timeseries_language) #random  intercepts + slopes
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
-4.077e-02
6.590e+01
test<-lmer(pMTGR_univariatecluster ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
-3.703e-02
test<-lmer(scale(pMTGL_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
4.077e-02
6.590e+01
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 9 | Stim == 7 | Stim == 14 | Stim == 17 )
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "Non-Vocal")
test<-lmer(scale(pMTGL_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
timeseries <- read.csv(file='../data/roitimeseries.csv')
unique(timeseries$SUBID)
timeseries$vocal= ifelse(timeseries$vocal=="y","Y", timeseries$vocal ) #recoding some values
timeseries$seconds<- (timeseries$TR - ((timeseries$order-1)*60))*0.475 # adding seconds to df
MIR <- read.csv(file='../data/audioExtraction.csv')
vocal_nonvocal <- read.csv(file='../data/vocal_nonvocal.csv')
vocal_nonvocal$vocal= ifelse(vocal_nonvocal$vocal=="y","Y", timeseries$vocal ) #recoding some values
vocal_nonvocal$liking= ifelse(vocal_nonvocal$liking=="0",NA, timeseries$liking ) #recoding some values
vocal_nonvocal$familiarity= ifelse(vocal_nonvocal$familiarity=="0",NA, timeseries$familiarity ) #recoding some values
timeseries_vocal <- subset(timeseries, timeseries$vocal=="Y")
time_seriespeak<-
timeseries %>%
subset((seconds) >=6) %>%
subset((seconds) <= 8)
test<-lmer(pMTGL_univariatecluster~older_younger + (1|SUBID) + (1|Stim), data=time_seriespeak) #random intercepts
library(tidyverse)
library(lmerTest)
library(lme4)
library(misty)
library(ggrepel)
test<-lmer(pMTGL_univariatecluster~older_younger + (1|SUBID) + (1|Stim), data=time_seriespeak) #random intercepts
timeseries <- read.csv(file='../data/roitimeseries.csv')
unique(timeseries$SUBID)
timeseries$vocal= ifelse(timeseries$vocal=="y","Y", timeseries$vocal ) #recoding some values
timeseries$seconds<- (timeseries$TR - ((timeseries$order-1)*60))*0.475 # adding seconds to df
MIR <- read.csv(file='../data/audioExtraction.csv')
vocal_nonvocal <- read.csv(file='../data/vocal_nonvocal.csv')
vocal_nonvocal$vocal= ifelse(vocal_nonvocal$vocal=="y","Y", timeseries$vocal ) #recoding some values
vocal_nonvocal$liking= ifelse(vocal_nonvocal$liking=="0",NA, timeseries$liking ) #recoding some values
vocal_nonvocal$familiarity= ifelse(vocal_nonvocal$familiarity=="0",NA, timeseries$familiarity ) #recoding some values
timeseries_vocal <- subset(timeseries, timeseries$vocal=="Y")
time_seriespeak<-
timeseries %>%
subset((seconds) >=6) %>%
subset((seconds) <= 8)
#merge MIR features w/ MIR peaks
MIR_timeseries <- merge(time_seriespeak, MIR, by="Stim")
test<-lmer(pMTGL_univariatecluster~older_younger + (1|SUBID) + (1|Stim), data=time_seriespeak) #random intercepts
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) (1|Stim), data=timeseries_language) #random  intercepts + slopes
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + (1|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + ((language)|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + (1|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + (1|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + (language|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 9 | Stim == 7 | Stim == 14 | Stim == 17 )
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "Non-Vocal")
test<-lmer(scale(pMTGL_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (1|Stim), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (1|Stim), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim), data=timeseries_language) #random intercepts
summary(test)
test<-lmer((pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim), data=timeseries_language) #random intercepts
summary(test)
test<-lmer((pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (1|Stim), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim),control=lmerControl(optimizer = c("bobyqa"). data=timeseries_language) #random intercepts
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim),control=lmerControl(optimizer = c("bobyqa"), data=timeseries_language) #random intercepts
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim), control=lmerControl(optimizer = c("bobyqa"), data=timeseries_language) #random intercepts
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim), control=lmerControl(optimizer = c("bobyqa"), data=timeseries_language)) #random intercepts
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID) + (language|Stim),  data=timeseries_language, control=lmerControl(optimizer = c("bobyqa"))) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + (language|SUBID) + (language|Stim),  data=timeseries_language, control=lmerControl(optimizer = c("bobyqa"))) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + (language|SUBID) + (1|Stim),  data=timeseries_language, control=lmerControl(optimizer = c("bobyqa"))) #random intercepts
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + (1|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) + ((language)|SUBID) + (1|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) + ((language)|SUBID) + (language|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) + ((language)|SUBID) + (language|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + (language|Stim), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ (language)  + ((language)|SUBID) + (language|Stim), data=timeseries_language) #random  intercepts + slopes
test<-lmer(scale(pMTGR_univariatecluster) ~ (language)  + ((language)|SUBID) + (language|Stim), data=timeseries_language, control=lmerControl(optimizer = c("bobyqa"))) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGL_univariatecluster)) #update ROIs here
)
library(tidyverse)
library(lmerTest)
library(lme4)
library(misty)
library(ggrepel)
timeseries <- read.csv(file='../data/roitimeseries.csv')
unique(timeseries$SUBID)
timeseries$vocal= ifelse(timeseries$vocal=="y","Y", timeseries$vocal ) #recoding some values
timeseries$seconds<- (timeseries$TR - ((timeseries$order-1)*60))*0.475 # adding seconds to df
MIR <- read.csv(file='../data/audioExtraction.csv')
vocal_nonvocal <- read.csv(file='../data/vocal_nonvocal.csv')
vocal_nonvocal$vocal= ifelse(vocal_nonvocal$vocal=="y","Y", timeseries$vocal ) #recoding some values
vocal_nonvocal$liking= ifelse(vocal_nonvocal$liking=="0",NA, timeseries$liking ) #recoding some values
vocal_nonvocal$familiarity= ifelse(vocal_nonvocal$familiarity=="0",NA, timeseries$familiarity ) #recoding some values
timeseries_vocal <- subset(timeseries, timeseries$vocal=="Y")
time_seriespeak<-
timeseries %>%
subset((seconds) >=6) %>%
subset((seconds) <= 8)
#merge MIR features w/ MIR peaks
MIR_timeseries <- merge(time_seriespeak, MIR, by="Stim")
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGL_univariatecluster)) #update ROIs here
)
View(timeseries_other)
View(timeseries_stimother)
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(MIR_timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(MIR_timeseries, self_other=="other")
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(MIR_timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
View(onset_value)
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(MIR_timeseries, self_other=="other")
View(timeseries_stimother)
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
View(MIR_timeseries)
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475)
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475)
timeseries_other %>%
group_by(SUBID, Stim)
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(MIR_timeseries, self_other=="other")
timeseries <- read.csv(file='../data/roitimeseries.csv')
unique(timeseries$SUBID)
timeseries$vocal= ifelse(timeseries$vocal=="y","Y", timeseries$vocal ) #recoding some values
timeseries$seconds<- (timeseries$TR - ((timeseries$order-1)*60))*0.475 # adding seconds to df
MIR <- read.csv(file='../data/audioExtraction.csv')
vocal_nonvocal <- read.csv(file='../data/vocal_nonvocal.csv')
vocal_nonvocal$vocal= ifelse(vocal_nonvocal$vocal=="y","Y", timeseries$vocal ) #recoding some values
vocal_nonvocal$liking= ifelse(vocal_nonvocal$liking=="0",NA, timeseries$liking ) #recoding some values
vocal_nonvocal$familiarity= ifelse(vocal_nonvocal$familiarity=="0",NA, timeseries$familiarity ) #recoding some values
timeseries_vocal <- subset(timeseries, timeseries$vocal=="Y")
time_seriespeak<-
timeseries %>%
subset((seconds) >=6) %>%
subset((seconds) <= 8)
#merge MIR features w/ MIR peaks
MIR_timeseries <- merge(time_seriespeak, MIR, by="Stim")
## doing roi-analyses for all music (i.e. vocal v non-vocal)
timeseries_other <- subset(timeseries, self_other=="other")
onset_value <-
timeseries_other %>%
group_by(SUBID, Stim) %>%
subset(seconds==0.475) %>%
mutate(
onset_value = pMTGL_univariatecluster #update ROIs here
)
onset_value <- cbind(onset_value[3],onset_value[5],onset_value[28])
timeseries_stimother <- merge(timeseries_other, onset_value, by.x=c("SUBID","Stim"), by.y=c("SUBID", "Stim"))
timeseries_stimother <-
timeseries_stimother %>%
group_by(SUBID, Stim) %>%
mutate(
scaled = ((pMTGL_univariatecluster - onset_value)/sd(pMTGL_univariatecluster)) #update ROIs here
)
MIR_timeseries <- merge(timeseries_stimother, MIR, by="Stim")
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 10 | Stim == 11 | Stim == 12 | Stim == 13 ) #pick stims want to compare
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "English")
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + ((langauge|Stim)), data=timeseries_language) #random  intercepts + slopes
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + ((language|Stim)), data=timeseries_language) #random  intercepts + slopes
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + ((language|Stim)), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language) +  scale(RMS_energy) + scale(event_density) + ((language)|SUBID) + ((1|Stim)), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language)  + ((language)|SUBID) + ((1|Stim)), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language)  + ((language)|SUBID) + ((language|Stim)), data=timeseries_language) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language)  + ((language)|SUBID) + ((language|Stim)), data=timeseries_language,control=lmerControl(optimizer = c("bobyqa"))) #random  intercepts + slopes
summary(test)
test<-lmer(scale(pMTGL_univariatecluster) ~ (language)  + ((language)|SUBID) + (1|Stim)), data=timeseries_language,control=lmerControl(optimizer = c("bobyqa"))) #random  intercepts + slopes
test<-lmer(scale(pMTGL_univariatecluster) ~ (language)  + ((language)|SUBID) + ((1|Stim)), data=timeseries_language,control=lmerControl(optimizer = c("bobyqa"))) #random  intercepts + slopes
summary(test)
test<-lmer((pMTGL_univariatecluster) ~ (language)  + ((language)|SUBID) + ((1|Stim)), data=timeseries_language,control=lmerControl(optimizer = c("bobyqa"))) #random  intercepts + slopes
summary(test)
MIR_timeseries <- merge(timeseries_stimother, MIR, by="Stim")
timeseries_language <-
MIR_timeseries%>%
subset(Stim == 8 | Stim == 15 | Stim == 9 | Stim == 7 | Stim == 14 | Stim == 17 )
timeseries_language$language <- ifelse(timeseries_language$Stim == 8 | timeseries_language$Stim == 15, "Non-English", "Non-Vocal")
test<-lmer(scale(pMTGL_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer((pMTGL_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer(scale(pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
test<-lmer((pMTGR_univariatecluster) ~ language + scale(RMS_energy) + scale(event_density) + (language|SUBID), data=timeseries_language) #random intercepts
summary(test)
library(tidyverse)
library(lme4)
library(lmerTest)
ID <- read.csv('../data/CONN_ID.csv')
names <- ID$CONN.id
names <- ID$X
View(ID)
ID <- read.csv('../data/CONN_ID.csv') %>%
na.rm()
ID <- read.csv('../data/CONN_ID.csv') %>%
na.omit()
ID <- read.csv('../data/CONN_ID.csv')
ID <- read.csv('../data/CONN_ID.csv') %>%
select(X != NA)
ID <- read.csv('../data/CONN_ID.csv') %>%
select(X !is.NA)
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(ColWtCL_6))
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(X))
View(ID)
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(CONN_id))
ID <- read.csv('../data/CONN_ID.csv') %>%
subset(!is.na(CONN.id))
names <- ID$X
